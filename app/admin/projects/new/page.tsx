'use client';

import { useState, useEffect } from 'react';
import axios from 'axios';
import { useRouter } from 'next/navigation';
import { createWork, CreateWorkInput } from '@/services/works';
import { getCustomers, Customer } from '@/services/customers';
import { getAllEmployees, Employee } from '@/services/employees';
import { useToast } from '@/hooks/use-toast';
import { 
  Plus, 
  Loader2, 
  User, 
  Briefcase, 
  AlertCircle, 
  CheckCircle, 
  MapPin, 
  Calendar, 
  DollarSign, 
  Users, 
  FileText, 
  Hash, 
  Mail, 
  ClipboardCheck,
  Map,
  LayoutGrid
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Progress } from '@/components/ui/progress';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Textarea } from '@/components/ui/textarea';
import { Switch } from '@/components/ui/switch';

export default function CreateWorkForm() {
  const router = useRouter();
  const { toast } = useToast();
  const [formData, setFormData] = useState<CreateWorkInput>({
    ID: '', // Will be generated by the backend
    name: '',
    userId: '',
    customerName: '', // Required
    customerId: '',   // Required
    address: undefined,
    startDate: new Date().toISOString().split('T')[0],
    endDate: undefined,
    budget: undefined,
    employeeInWork: undefined,
    documents: undefined,
    number: undefined,
    email: undefined,
    emailCustomer: undefined,
    statusWork: 'Pendiente',
    workUbication: undefined,
    projectType: 'Otro',
  });
  
  const [customers, setCustomers] = useState<Customer[]>([]);
  const [employees, setEmployees] = useState<Employee[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isUploading, setIsUploading] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState(false);
  const [token, setToken] = useState<string | null>(null);

  useEffect(() => {
    // Get token from localStorage
    const authToken = localStorage.getItem('token');
    if (authToken) {
      setToken(authToken);
    }

    const fetchData = async () => {
      setIsLoading(true);
      try {
        // Fetch customers and employees in parallel
        const [customersResponse, employeesList] = await Promise.all([
          getCustomers(),
          getAllEmployees()
        ]);
        
        setCustomers(customersResponse.customers || []);
        setEmployees(employeesList || []);
      } catch (err) {
        setError('Error al cargar los datos');
        toast({
          title: 'Error',
          description: 'No se pudieron cargar los datos necesarios',
          variant: 'destructive',
        });
      } finally {
        setIsLoading(false);
      }
    };

    fetchData();
  }, [toast]);

  const handleEmployeeSelect = (employeeId: string) => {
    setFormData(prev => {
      const currentEmployees = prev.employeeInWork || [];
      // If employee is already selected, remove them
      if (currentEmployees.includes(employeeId)) {
        return {
          ...prev,
          employeeInWork: currentEmployees.filter(id => id !== employeeId)
        };
      }
      // Otherwise add them
      return {
        ...prev,
        employeeInWork: [...currentEmployees, employeeId]
      };
    });
  };

  const isEmployeeSelected = (employeeId: string) => {
    return (formData.employeeInWork || []).includes(employeeId);
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  interface UploadResponse {
    message: string;
    document: {
      fileName: string;
      originalName: string;
      mimeType: string;
      size: number;
      url: string;
    };
  }

  const handleFileUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files;
    if (!files || files.length === 0 || !formData.userId) return;

    setIsUploading(true);
    setUploadProgress(0);

    try {
      // Upload each file and collect the URLs
      const uploadPromises = Array.from(files).map(async (file) => {
        const uploadData = new FormData();
        uploadData.append('file', file);

        if (!token) {
          throw new Error('No se encontró el token de autenticación');
        }

        const response = await axios.post<UploadResponse>(
          `${process.env.NEXT_PUBLIC_API_URL || 'https://crmdbsoft.zeabur.app'}/${formData.userId}/upload`,
          uploadData,
          {
            headers: {
              'Content-Type': 'multipart/form-data',
              'Authorization': `Bearer ${token}`
            },
            onUploadProgress: (progressEvent: any) => { // Using any to bypass type checking
              if (progressEvent.lengthComputable) {
                const percentCompleted = Math.round(
                  (progressEvent.loaded * 100) / progressEvent.total
                );
                setUploadProgress(percentCompleted);
              }
            },
          } as any // Type assertion to bypass the type checking for axios config
        );

        if (response.data?.document?.url) {
          return response.data.document.url;
        }
        throw new Error('No se pudo obtener la URL del archivo subido');
      });

      const uploadedUrls = await Promise.all(uploadPromises);
      
      // Update form data with new document URLs
      setFormData(prev => ({
        ...prev,
        documents: [...(prev.documents || []), ...uploadedUrls]
      }));
      
      toast({
        title: "¡Éxito!",
        description: `Se subieron ${uploadedUrls.length} archivo(s) correctamente.`,
      });
    } catch (error) {
      console.error('Error uploading files:', error);
      toast({
        title: "Error",
        description: error instanceof Error ? error.message : "Hubo un error al subir los archivos. Por favor, inténtalo de nuevo.",
        variant: "destructive",
      });
    } finally {
      setIsUploading(false);
      setUploadProgress(0);
      // Reset file input
      if (e.target) e.target.value = '';
    }
  };

  const removeDocument = (index: number) => {
    setFormData(prev => ({
      ...prev,
      documents: prev.documents?.filter((_, i) => i !== index)
    }));
  };

  const handleCustomerSelect = (customerId: string) => {
    const selectedCustomer = customers.find(c => c._id === customerId);
    if (selectedCustomer) {
      setFormData(prev => ({
        ...prev,
        customerId: selectedCustomer._id,
        customerName: selectedCustomer.name,
        userId: selectedCustomer.userId || '',
        email: selectedCustomer.email || '',
        emailCustomer: selectedCustomer.email || '',
        address: selectedCustomer.address || prev.address
      }));
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    setError(null);
    setSuccess(false);

    const {...dataToSend } = formData;

    try {
      await createWork(dataToSend as CreateWorkInput);
      setSuccess(true);
      toast({
        title: '¡Éxito!',
        description: 'El proyecto se ha creado correctamente',
      });
      
      // Reset form with default values
      setFormData({
        ID: '', // Reset ID for new entry
        name: '',
        userId: formData.userId, // Keep the same user ID
        customerName: '',
        customerId: '',
        address: undefined,
        startDate: new Date().toISOString().split('T')[0],
        endDate: undefined,
        budget: undefined,
        employeeInWork: undefined,
        documents: undefined,
        number: undefined,
        email: undefined,
        emailCustomer: undefined,
        statusWork: 'Pendiente',
        workUbication: undefined,
        projectType: 'Otro',
      });
      
      // Redirect to projects list after a short delay
      setTimeout(() => {
        router.push('/admin/projects');
      }, 1500);
      
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Error al crear el proyecto';
      setError(errorMessage);
      toast({
        title: 'Error',
        description: errorMessage,
        variant: 'destructive',
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="container mx-auto py-8 px-4">
      <Card className="max-w-2xl mx-auto">
        <CardHeader>
          <div className="flex items-center gap-3">
            <Briefcase className="h-6 w-6 text-primary" />
            <div>
              <CardTitle>Nuevo Proyecto</CardTitle>
              <CardDescription>
                Complete el formulario para crear un nuevo proyecto
              </CardDescription>
            </div>
          </div>
        </CardHeader>
        
        <CardContent>
          {error && (
            <Alert variant="destructive" className="mb-6">
              <AlertCircle className="h-4 w-4" />
              <AlertTitle>Error</AlertTitle>
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}
          
          {success && (
            <Alert className="mb-6 bg-green-50 border-green-200">
              <CheckCircle className="h-4 w-4 text-green-600" />
              <AlertTitle>¡Éxito!</AlertTitle>
              <AlertDescription className="text-green-700">
                El proyecto se ha creado correctamente. Redirigiendo...
              </AlertDescription>
            </Alert>
          )}

          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="space-y-2">
                <Label htmlFor="name">
                  <div className="flex items-center gap-2">
                    <Briefcase className="h-4 w-4" />
                    <span>Nombre del Proyecto *</span>
                  </div>
                </Label>
                <Input
                  id="name"
                  name="name"
                  value={formData.name}
                  onChange={handleChange}
                  placeholder="Ej: Desarrollo de Sitio Web"
                  required
                  disabled={isSubmitting}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="number">
                  <div className="flex items-center gap-2">
                    <Hash className="h-4 w-4" />
                    <span>Número de Proyecto</span>
                  </div>
                </Label>
                <Input
                  id="number"
                  name="number"
                  value={formData.number}
                  onChange={handleChange}
                  placeholder="Ej: PROJ-2023-001"
                  disabled={isSubmitting}
                />
              </div>

              <div className="space-y-2">
                <Label>
                  <div className="flex items-center gap-2">
                    <User className="h-4 w-4" />
                    <span>Cliente *</span>
                  </div>
                </Label>
                {isLoading ? (
                  <div className="flex items-center justify-center p-4 border rounded-md">
                    <Loader2 className="h-4 w-4 animate-spin mr-2" />
                    <span>Cargando clientes...</span>
                  </div>
                ) : (
                  <Select 
                    value={formData.customerId} 
                    onValueChange={handleCustomerSelect}
                    disabled={isSubmitting}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Seleccione un cliente" />
                    </SelectTrigger>
                    <SelectContent>
                      {customers.map((customer) => (
                        <SelectItem key={customer._id} value={customer._id}>
                          <div className="flex items-center gap-2">
                            <User className="h-4 w-4 text-muted-foreground" />
                            <div>
                              <p className="font-medium">{customer.name}</p>
                              {customer.email && (
                                <p className="text-xs text-muted-foreground">{customer.email}</p>
                              )}
                            </div>
                          </div>
                        </SelectItem>
                      ))}
                      {customers.length === 0 && (
                        <div className="p-2 text-sm text-muted-foreground">
                          No hay clientes disponibles
                        </div>
                      )}
                    </SelectContent>
                  </Select>
                )}
              </div>

              <div className="space-y-2">
                <Label htmlFor="projectType">
                  <div className="flex items-center gap-2">
                    <LayoutGrid className="h-4 w-4" />
                    <span>Tipo de Proyecto</span>
                  </div>
                </Label>
                <Select 
                  value={formData.projectType}
                  onValueChange={(value) => setFormData(prev => ({ ...prev, projectType: value }))}
                  disabled={isSubmitting}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Seleccione un tipo" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="residencial">Residencial</SelectItem>
                    <SelectItem value="comercial">Comercial</SelectItem>
                    <SelectItem value="industrial">Industrial</SelectItem>
                    <SelectItem value="Construcción">Construcción</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label htmlFor="statusWork">
                  <div className="flex items-center gap-2">
                    <ClipboardCheck className="h-4 w-4" />
                    <span>Estado</span>
                  </div>
                </Label>
                <Select 
                  value={formData.statusWork}
                  onValueChange={(value) => setFormData(prev => ({ ...prev, statusWork: value }))}
                  disabled={isSubmitting}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Seleccione un estado" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="activo">Activo</SelectItem>
                    <SelectItem value="En progreso">En Progreso</SelectItem>
                    <SelectItem value="inactivo">Inactivo</SelectItem>
                    <SelectItem value="pausado">Pausado</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label>
                  <div className="flex items-center gap-2">
                    <Users className="h-4 w-4" />
                    <span>Empleados Asignados</span>
                  </div>
                </Label>
                {isLoading ? (
                  <div className="flex items-center justify-center p-4 border rounded-md">
                    <Loader2 className="h-4 w-4 animate-spin mr-2" />
                    <span>Cargando empleados...</span>
                  </div>
                ) : (
                  <Select onValueChange={handleEmployeeSelect}>
                    <SelectTrigger>
                      <SelectValue placeholder="Seleccione empleados" />
                    </SelectTrigger>
                    <SelectContent>
                      {employees.map((employee) => (
                        <div 
                          key={employee._id}
                          className="relative flex items-center px-2 py-1.5 text-sm rounded-sm hover:bg-accent cursor-pointer"
                          onClick={(e) => {
                            e.preventDefault();
                            handleEmployeeSelect(employee._id);
                          }}
                        >
                          <input
                            type="checkbox"
                            checked={formData?.employeeInWork?.includes(employee._id)}
                            onChange={() => {}}
                            className="h-4 w-4 rounded border-gray-300 text-primary focus:ring-primary mr-2"
                          />
                          <div>
                            <p className="font-medium">{employee.name}</p>
                            {employee.position && (
                              <p className="text-xs text-muted-foreground">{employee.position}</p>
                            )}
                          </div>
                        </div>
                      ))}
                      {employees.length === 0 && (
                        <div className="p-2 text-sm text-muted-foreground">
                          No hay empleados disponibles
                        </div>
                      )}
                    </SelectContent>
                  </Select>
                )}
                {(formData.employeeInWork?.length ?? 0) > 0 && (
                  <div className="mt-2 flex flex-wrap gap-2">
                    {(formData.employeeInWork || []).map(employeeId => {
                      const employee = employees.find(e => e._id === employeeId);
                      if (!employee) return null;
                      return (
                        <span 
                          key={employee._id}
                          className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-primary/10 text-primary"
                        >
                          {employee.name}
                          <button
                            type="button"
                            onClick={(e) => {
                              e.stopPropagation();
                              handleEmployeeSelect(employee._id);
                            }}
                            className="ml-1.5 inline-flex items-center justify-center h-4 w-4 rounded-full bg-primary/20 text-primary hover:bg-primary/30"
                          >
                            <span className="sr-only">Eliminar</span>
                            <svg className="h-2 w-2" fill="currentColor" viewBox="0 0 8 8">
                              <path fillRule="evenodd" d="M4 3.293l2.146-2.147a.5.5 0 01.708.708L4.707 4l2.147 2.146a.5.5 0 01-.708.708L4 4.707l-2.146 2.147a.5.5 0 01-.708-.708L3.293 4 1.146 1.854a.5.5 0 01.708-.708L4 3.293z" clipRule="evenodd" />
                            </svg>
                          </button>
                        </span>
                      );
                    })}
                  </div>
                )}
              </div>

              <div className="space-y-2">
                <Label htmlFor="workUbication">
                  <div className="flex items-center gap-2">
                    <MapPin className="h-4 w-4" />
                    <span>Ubicación</span>
                  </div>
                </Label>
                <Input
                  id="workUbication"
                  name="workUbication"
                  value={formData.workUbication}
                  onChange={handleChange}
                  placeholder="Ubicación del proyecto"
                  disabled={isSubmitting}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="address">
                  <div className="flex items-center gap-2">
                    <Map className="h-4 w-4" />
                    <span>Dirección</span>
                  </div>
                </Label>
                <Input
                  id="address"
                  name="address"
                  value={formData.address}
                  onChange={handleChange}
                  placeholder="Dirección del proyecto"
                  disabled={isSubmitting}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="startDate">
                  <div className="flex items-center gap-2">
                    <Calendar className="h-4 w-4" />
                    <span>Fecha de Inicio</span>
                  </div>
                </Label>
                <Input
                  type="date"
                  id="startDate"
                  name="startDate"
                  value={formData.startDate}
                  onChange={handleChange}
                  disabled={isSubmitting}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="endDate">
                  <div className="flex items-center gap-2">
                    <Calendar className="h-4 w-4" />
                    <span>Fecha de Finalización</span>
                  </div>
                </Label>
                <Input
                  type="date"
                  id="endDate"
                  name="endDate"
                  value={formData.endDate}
                  onChange={handleChange}
                  disabled={isSubmitting}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="budget">
                  <div className="flex items-center gap-2">
                    <DollarSign className="h-4 w-4" />
                    <span>Presupuesto ($)</span>
                  </div>
                </Label>
                <Input
                  type="number"
                  id="budget"
                  name="budget"
                  value={formData.budget || ''}
                  onChange={(e) => setFormData(prev => ({ ...prev, budget: Number(e.target.value) }))}
                  placeholder="0.00"
                  step="0.01"
                  min="0"
                  disabled={isSubmitting}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="email">
                  <div className="flex items-center gap-2">
                    <Mail className="h-4 w-4" />
                    <span>Email de Contacto</span>
                  </div>
                </Label>
                <Input
                  type="email"
                  id="email"
                  name="email"
                  value={formData.email}
                  onChange={handleChange}
                  placeholder="email@ejemplo.com"
                  disabled={isSubmitting}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="emailCustomer">
                  <div className="flex items-center gap-2">
                    <Mail className="h-4 w-4" />
                    <span>Email del Cliente</span>
                  </div>
                </Label>
                <Input
                  type="email"
                  id="emailCustomer"
                  name="emailCustomer"
                  value={formData.emailCustomer}
                  onChange={handleChange}
                  placeholder="cliente@ejemplo.com"
                  disabled={isSubmitting}
                />
              </div>

              <div className="space-y-2">
                <Label>
                  <div className="flex items-center gap-2">
                    <FileText className="h-4 w-4" />
                    <span>Documentos</span>
                  </div>
                </Label>
                <div className="p-4 border rounded-md bg-muted/5">
                  <div className="space-y-3">
                    {/* Upload Button */}
                    <div className="flex items-center gap-2">
                      <input
                        type="file"
                        id="document-upload"
                        multiple
                        className="hidden"
                        onChange={handleFileUpload}
                        disabled={isUploading || isSubmitting}
                        accept=".pdf,.doc,.docx,.xls,.xlsx,.jpg,.jpeg,.png"
                      />
                      <label
                        htmlFor="document-upload"
                        className={`inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-9 px-4 py-2 cursor-pointer ${isUploading ? 'opacity-50 cursor-not-allowed' : ''}`}
                      >
                        <FileText className="h-4 w-4 mr-2" />
                        {isUploading ? 'Subiendo...' : 'Seleccionar archivos'}
                      </label>
                      <span className="text-sm text-muted-foreground">
                        {formData.documents?.length || 0} archivo(s) adjunto(s)
                      </span>
                    </div>

                    {/* Upload Progress */}
                    {isUploading && (
                      <div className="space-y-2">
                        <div className="flex justify-between text-xs text-muted-foreground">
                          <span>Progreso de carga</span>
                          <span>{uploadProgress}%</span>
                        </div>
                        <Progress value={uploadProgress} className="h-2" />
                      </div>
                    )}

                    {/* Document List */}
                    {formData.documents && formData.documents.length > 0 && (
                      <div className="mt-4 space-y-2">
                        <h4 className="text-sm font-medium">Documentos adjuntos:</h4>
                        <div className="space-y-2">
                          {formData.documents.map((doc, index) => (
                            <div key={index} className="flex items-center justify-between p-2 text-sm border rounded">
                              <div className="flex items-center gap-2">
                                <FileText className="h-4 w-4 text-muted-foreground" />
                                <span className="truncate max-w-[200px]">
                                  {doc.split('/').pop()}
                                </span>
                              </div>
                              <Button
                                type="button"
                                variant="ghost"
                                size="icon"
                                className="h-6 w-6"
                                onClick={() => removeDocument(index)}
                                disabled={isSubmitting}
                              >
                                <svg
                                  xmlns="http://www.w3.org/2000/svg"
                                  width="16"
                                  height="16"
                                  viewBox="0 0 24 24"
                                  fill="none"
                                  stroke="currentColor"
                                  strokeWidth="2"
                                  strokeLinecap="round"
                                  strokeLinejoin="round"
                                  className="h-3 w-3 text-muted-foreground"
                                >
                                  <path d="M18 6 6 18" />
                                  <path d="m6 6 12 12" />
                                </svg>
                                <span className="sr-only">Eliminar</span>
                              </Button>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </div>

              {formData.customerId && (
                <div className="p-4 bg-muted/50 rounded-md">
                  <div className="flex items-center gap-2 text-sm">
                    <User className="h-4 w-4 text-muted-foreground" />
                    <span className="font-medium">Cliente seleccionado:</span>
                    <span>{formData.customerName}</span>
                  </div>
                </div>
              )}
            </div>

            <div className="flex justify-end gap-3 pt-4">
              <Button 
                type="button" 
                variant="outline" 
                onClick={() => router.push('/admin/projects')}
                disabled={isSubmitting}
              >
                Cancelar
              </Button>
              <Button type="submit" disabled={isSubmitting || !formData.customerId}>
                {isSubmitting ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Creando...
                  </>
                ) : (
                  <>
                    <Plus className="mr-2 h-4 w-4" />
                    Crear Proyecto
                  </>
                )}
              </Button>
            </div>
          </form>
        </CardContent>
      </Card>
    </div>
  );
}